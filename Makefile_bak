TARGET = i686-elf

TOOLS_DIR 	= tools/bin
BUILD_DIR 	= build
SRC_DIR 	= src
ISO_DIR		= isodir

CC = $(TOOLS_DIR)/$(TARGET)-gcc
AS = $(TOOLS_DIR)/$(TARGET)-as

OS_NAME 	= gurt
KERNEL_BIN 	= $(OS_NAME).bin
OS_ISO 		= $(OS_NAME).iso

ASM_SRC = boot.s \
	  $(SRC_DIR)/kernel/set_gdt.s

C_SRC 	= $(SRC_DIR)/kernel/kernel.c 	\
	  $(SRC_DIR)/kernel/set_gdt.c

OBJS = boot.o 		\
       kernel.o 	\
       set_gdt.o 	\
       gdt.o

$(BUILD_DIR)/$(OS_ISO): $(SRC_DIR)/grub.cfg $(BUILD_DIR)/$(KERNEL_BIN)
	mkdir -p $(ISO_DIR)/boot/grub
	cp $(BUILD_DIR)/$(KERNEL_BIN) $(ISO_DIR)/boot/$(KERNEL_BIN)
	cp $(SRC_DIR)/grub.cfg $(ISO_DIR)/boot/grub/grub.cfg
	grub-mkrescue -o $(BUILD_DIR)/$(OS_ISO) $(ISO_DIR)

$(BUILD_DIR)/$(KERNEL_BIN): $(SRC_DIR)/linker.ld $(BUILD_DIR)/boot.o $(BUILD_DIR)/kernel.o $(BUILD_DIR)/set_gdt.o $(BUILD_DIR)/gdt.o
	$(CC) 	-T $(SRC_DIR)/linker.ld 	\
		-o $(BUILD_DIR)/$(KERNEL_BIN) 	\
		-ffreestanding 					\
		-O2 							\
		-nostdlib 						\
		$(BUILD_DIR)/boot.o 			\
		$(BUILD_DIR)/kernel.o 			\
		$(BUILD_DIR)/set_gdt.o 			\
		$(BUILD_DIR)/gdt.o 			\
		-lgcc

$(BUILD_DIR)/boot.o: $(SRC_DIR)/boot.s | $(BUILD_DIR)
	$(AS) $(SRC_DIR)/boot.s -o $(BUILD_DIR)/boot.o

$(BUILD_DIR)/set_gdt.o: $(SRC_DIR)/set_gdt.s | $(BUILD_DIR)
	$(AS) $(SRC_DIR)/set_gdt.s -o $(BUILD_DIR)/set_gdt.o

$(BUILD_DIR)/kernel.o: $(SRC_DIR)/kernel.c | $(BUILD_DIR)
	$(CC) 	-c $(SRC_DIR)/kernel.c 	\
		-o $(BUILD_DIR)/kernel.o 	\
		-std=gnu99 					\
		-ffreestanding 				\
		-O2 						\
		-Wall 						\
		-Wextra

$(BUILD_DIR)/gdt.o: $(SRC_DIR)/gdt.c | $(BUILD_DIR)
	$(CC) 	-c $(SRC_DIR)/gdt.c 	\
		-o $(BUILD_DIR)/gdt.o 	\
		-std=gnu99 					\
		-ffreestanding 				\
		-O2 						\
		-Wall 						\
		-Wextra

$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)

clean:
	rm -f $(BUILD_DIR)/*

run: $(BUILD_DIR)/$(OS_ISO)
	qemu-system-i386 -cdrom $(BUILD_DIR)/$(OS_ISO)

.PHONY: clean run test
